{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Average number of extra steps taken is ', 4545.048)\n",
      "('The 95th percentile of extra steps taken is ', 8820)\n",
      "('Total number of steps is ', 9990)\n"
     ]
    }
   ],
   "source": [
    "def example_strategy_step_function(elevator, state):\n",
    "    \"\"\"\n",
    "    The function implements the strategy of an elevator starting at the ground floor and moving to the last floor, stoping at each floor.\n",
    "    \n",
    "    Parameters:\n",
    "        elevator (Elevator instance): \n",
    "        state (dict): The dictionary that is keeping the track of the state, in this case the direction in which elevator is moving\n",
    "    \"\"\"\n",
    "    \n",
    "    MOVING_UP = \"moving_up\"\n",
    "    STOPPED_AND_OPENED = \"stopped_and_opened\"\n",
    "    if not state:\n",
    "        state[MOVING_UP] = True\n",
    "        state[STOPPED_AND_OPENED] = False\n",
    "\n",
    "    state[STOPPED_AND_OPENED] = not state[STOPPED_AND_OPENED]\n",
    "\n",
    "    if state[STOPPED_AND_OPENED]:\n",
    "        return Simulation.STOP_AND_OPEN\n",
    "    else:\n",
    "        current_floor = elevator.current_floor\n",
    "        top_floor = elevator.floor_range[-1]\n",
    "        bottom_floor = elevator.floor_range[0]\n",
    "\n",
    "        if state[MOVING_UP] == True and current_floor == top_floor:\n",
    "            state[MOVING_UP] = False\n",
    "        elif state[MOVING_UP] == False and current_floor == bottom_floor:\n",
    "            state[MOVING_UP] = True\n",
    "\n",
    "        if state[MOVING_UP] == True:\n",
    "            return Simulation.MOVE_UP\n",
    "        else:\n",
    "            return Simulation.MOVE_DOWN\n",
    "\n",
    "modeling = Simulation(no_of_floors=100,no_of_passengers=1000, capacity=15, step_function=example_strategy_step_function)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Average number of extra steps taken is ', 15339.618)\n",
      "('The 95th percentile of extra steps taken is ', 29367)\n",
      "('Total number of steps is ', 32307)\n"
     ]
    }
   ],
   "source": [
    "def first_come_step_function(elevator,state):\n",
    "    \"\"\"\n",
    "    Defines the \"First Come, First Serve\" elevator strategy.\n",
    "\n",
    "    Parameters:\n",
    "        elevator (Elevator object):\n",
    "        state (dict): The dictionary that is keeping the track of the state, in this case the direction in which elevator is moving.\n",
    "    \"\"\"\n",
    "    if not elevator.passengers_in_elevator:\n",
    "        if elevator.current_floor < elevator.pending_requests[0].starting_floor:\n",
    "            return Simulation.MOVE_UP\n",
    "        elif elevator.current_floor > elevator.pending_requests[0].starting_floor:\n",
    "            return Simulation.MOVE_DOWN\n",
    "        else:\n",
    "            return Simulation.STOP_AND_OPEN\n",
    "    else:\n",
    "        if elevator.current_floor < elevator.passengers_in_elevator[0].destination_floor:\n",
    "            return Simulation.MOVE_UP\n",
    "        elif elevator.current_floor > elevator.passengers_in_elevator[0].destination_floor:\n",
    "            return Simulation.MOVE_DOWN\n",
    "        else:\n",
    "            return Simulation.STOP_AND_OPEN\n",
    "\n",
    "modeling = Simulation(no_of_floors=100,no_of_passengers=1000, capacity=15, step_function=first_come_step_function)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Average number of extra steps taken is ', 3883.51)\n",
      "('The 95th percentile of extra steps taken is ', 7640)\n",
      "('Total number of steps is ', 8854)\n"
     ]
    }
   ],
   "source": [
    "from collections import Counter\n",
    "\n",
    "\n",
    "def democratic_strategy_step_function(elevator, state):\n",
    "    \"\"\"Defines the Democratic Strategy, picking up passengers who are on floors the elevator is passing, and dropping off passengers at the floor most have as their destination.\n",
    "\n",
    "    Parameters:\n",
    "        elevator (Elevator object):\n",
    "        state (dict): The dictionary that is keeping the track of the state, in this case the direction in which elevator is moving.\n",
    "    \"\"\"\n",
    "\n",
    "    for passenger in elevator.passengers_in_elevator:  # Checks if we are on the destination of someone.\n",
    "        if passenger.destination_floor == elevator.current_floor:\n",
    "            return Simulation.STOP_AND_OPEN\n",
    "\n",
    "    if (len(elevator.passengers_in_elevator) < elevator.capacity  # Checks if we can pick up people on\n",
    "                                                                  # current floor.\n",
    "       and elevator.current_floor in elevator.requests_by_floor\n",
    "       and elevator.requests_by_floor[elevator.current_floor]):\n",
    "        return Simulation.STOP_AND_OPEN\n",
    "\n",
    "    floors = None\n",
    "    if elevator.passengers_in_elevator:  # This block of code decides how to moves the elevator.\n",
    "        floors = [ passenger.destination_floor for passenger in elevator.passengers_in_elevator ]\n",
    "    else:\n",
    "        floors = [ passenger.starting_floor for passenger in elevator.pending_requests ]\n",
    "    mode_floor = Counter(floors).most_common(1)[0][0]\n",
    "    return [ Simulation.MOVE_UP, Simulation.MOVE_DOWN, ][mode_floor < elevator.current_floor]\n",
    "\n",
    "modeling = Simulation(no_of_floors=100,no_of_passengers=1000, capacity=15, step_function=democratic_strategy_step_function)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
